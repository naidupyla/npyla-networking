# .github/workflows/deploy.yml

name: Deploy HTML App with Terraform, Ansible, and Docker

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  deploy:
    name: Deploy with Terraform and Ansible
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Azure Login
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible==8.5.0
          ansible --version

      # # Set up Terraform
      # - name: Set up Terraform
      #   uses: hashicorp/setup-terraform@v2
      #   with:
      #     terraform_version: 1.3.0

      # # # Initialize Terraform
      # - name: Initialize Terraform
      #   run: terraform init
      #   working-directory: terraform
      # # Import existing resources if not in the state
      # - name: Import Resource Group if not managed
      #   run: |
      #     terraform state show azurerm_resource_group.rg || \
      #     terraform import azurerm_resource_group.rg /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tf-linux-rg
      #   working-directory: terraform

      # - name: Import Virtual Network if not managed
      #   run: |
      #     terraform state show azurerm_virtual_network.vnet || \
      #     terraform import azurerm_virtual_network.vnet /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tf-linux-rg/providers/Microsoft.Network/virtualNetworks/tf-linux-vm-vnet
      #   working-directory: terraform

      # - name: Import Subnet if not managed
      #   run: |
      #     terraform state show azurerm_subnet.subnet || \
      #     terraform import azurerm_subnet.subnet /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tf-linux-rg/providers/Microsoft.Network/virtualNetworks/tf-linux-vm-vnet/subnets/tf-linux-vm-subnet
      #   working-directory: terraform

      # - name: Import Public IP if not managed
      #   run: |
      #     terraform state show azurerm_public_ip.public_ip || \
      #     terraform import azurerm_public_ip.public_ip /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tf-linux-rg/providers/Microsoft.Network/publicIPAddresses/tf-linux-vm-public-ip
      #   working-directory: terraform

      # - name: Import Network Interface if not managed
      #   run: |
      #     terraform state show azurerm_network_interface.nic || \
      #     terraform import azurerm_network_interface.nic /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tf-linux-rg/providers/Microsoft.Network/networkInterfaces/tf-linux-vm-nic
      #   working-directory: terraform

      # - name: Import Virtual Machine if not managed
      #   run: |
      #     terraform state show azurerm_linux_virtual_machine.linux_vm || \
      #     terraform import azurerm_linux_virtual_machine.linux_vm /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tf-linux-rg/providers/Microsoft.Compute/virtualMachines/tf-linux-vm
      #   working-directory: terraform
      # - name: Import NSG if not managed
      #   run: |
      #     terraform state show azurerm_network_security_group.nsg || \
      #     terraform import azurerm_network_security_group.nsg /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tf-linux-rg/providers/Microsoft.Network/networkSecurityGroups/Network-NSG
      #   working-directory: terraform
      # # Import existing Network Security Group Association if not managed
      # - name: Import Subnet NSG Association if not managed
      #   run: |
      #     terraform state show azurerm_subnet_network_security_group_association.nsg_association || \
      #     terraform import azurerm_subnet_network_security_group_association.nsg_association /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tf-linux-rg/providers/Microsoft.Network/virtualNetworks/tf-linux-vm-vnet/subnets/tf-linux-vm-subnet
      #   working-directory: terraform
    
      # # Terraform Plan
      # - name: Terraform Plan
      #   run: terraform plan -out=tfplan
      #   working-directory: terraform

      # # Terraform Apply
      # - name: Terraform Apply
      #   if: github.ref == 'refs/heads/main'
      #   run: terraform apply -auto-approve tfplan
      #   working-directory: terraform

      # # Retrieve Terraform Outputs
      # - name: Retrieve Terraform Outputs
      #   id: terraform_output
      #   run: |
      #     PUBLIC_IP=$(az network public-ip show \
      #       --resource-group tf-linux-rg \
      #       --name tf-linux-vm-public-ip \
      #       --query ipAddress -o tsv)
      #     echo "public_ip=${PUBLIC_IP}" >> $GITHUB_ENV  
      #   working-directory: terraform

      # Decode the private key and save it to a file
      # - name: Decode and save SSH private key
      #   run: |
      #     echo "${{ secrets.AZURE_PRIVATE_KEY }}" >> private_key.pem
      #     chmod 600 private_key.pem

      # # Test SSH Connection (Add verbosity for troubleshooting)
      # - name: Test SSH Connection
      #   run: |
      #     chmod 600 azurekeypair.pem
      #     echo "Testing SSH connection to VM..."
      #     pwd
      #     ls -l 
      #     ssh -i azurekeypair.pem -o StrictHostKeyChecking=no -vvv azureuser@104.42.130.100 echo "SSH connection successful"
      #   shell: bash

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible==6.3.0  # Using a specific older version for better compatibility
          sudo apt-get update
          sudo apt-get install -y openssh-client

      - name: Setup SSH
        run: |
          eval $(ssh-agent -s)
          chmod 600 azurekeypair.pem
          ssh-add azurekeypair.pem
          mkdir -p ~/.ssh
          echo "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null\n\tServerAliveInterval 60\n\tServerAliveCountMax 3" > ~/.ssh/config

      - name: Verify SSH Connection
        run: |
          ssh -i azurekeypair.pem -o StrictHostKeyChecking=no azureuser@104.42.130.100 'echo "Connection successful"'

      - name: Install Python on Remote
        run: |
          ssh -i azurekeypair.pem azureuser@104.42.130.100 '
          if ! command -v python3 &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y python3 python3-pip
          fi'

      - name: Run Ansible
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
          ANSIBLE_SSH_RETRIES: "5"
          ANSIBLE_RETRY_FILES_ENABLED: "True"
        run: |
          chmod 600 azurekeypair.pem
          ansible-playbook -i inventory.ini playbook.yml -vvv
        working-directory: ansible


      